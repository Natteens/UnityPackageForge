#!/usr/bin/env python3
"""
Script para build local do Unity Package Forge
Use este script para testar builds localmente antes de fazer push
"""

import os
import sys
import subprocess
import platform
import shutil
from pathlib import Path


def run_command(cmd, cwd=None):
    """Executa um comando e retorna o resultado"""
    try:
        # Definir encoding UTF-8 para evitar problemas com caracteres especiais
        result = subprocess.run(cmd, shell=True, check=True,
                                capture_output=True, text=True, cwd=cwd,
                                encoding='utf-8', errors='replace')
        return result.returncode == 0, result.stdout, result.stderr
    except subprocess.CalledProcessError as e:
        return False, e.stdout, e.stderr


def check_dependencies():
    """Verifica se todas as depend√™ncias est√£o instaladas"""
    print("üîç Verificando depend√™ncias...")

    # Verificar Python
    python_version = sys.version_info
    if python_version < (3, 7):
        print("‚ùå Python 3.7+ √© necess√°rio")
        return False
    print(f"‚úÖ Python {python_version.major}.{python_version.minor}.{python_version.micro}")

    # Verificar pip packages
    required_packages = [
        'pyinstaller',
        'customtkinter',
        'requests',
        'cryptography'
    ]

    for package in required_packages:
        success, _, _ = run_command(f"python -m pip show {package}")
        if success:
            print(f"‚úÖ {package}")
        else:
            print(f"‚ùå {package} - Execute: pip install {package}")
            return False

    return True


def clean_build():
    """Limpa arquivos de build anteriores"""
    print("üßπ Limpando builds anteriores...")

    dirs_to_clean = ['build', 'dist', '__pycache__']
    for dir_name in dirs_to_clean:
        if os.path.exists(dir_name):
            shutil.rmtree(dir_name)
            print(f"‚úÖ Removido: {dir_name}")

    # Limpar arquivos .pyc
    for root, dirs, files in os.walk('.'):
        for file in files:
            if file.endswith('.pyc'):
                os.remove(os.path.join(root, file))


def create_version_info():
    """Cria arquivo de informa√ß√µes de vers√£o para Windows"""
    if platform.system() != 'Windows':
        return True

    print("üìÑ Criando informa√ß√µes de vers√£o para Windows...")

    version_info = '''
VSVersionInfo(
  ffi=FixedFileInfo(
    filevers=(1, 0, 0, 0),
    prodvers=(1, 0, 0, 0),
    mask=0x3f,
    flags=0x0,
    OS=0x4,
    fileType=0x1,
    subtype=0x0,
    date=(0, 0)
  ),
  kids=[
    StringFileInfo(
      [
        StringTable(
          '040904B0',
          [
            StringStruct('CompanyName', 'Nathan da Silva Miranda'),
            StringStruct('FileDescription', 'Unity Package Forge'),
            StringStruct('FileVersion', '1.0.0'),
            StringStruct('InternalName', 'unity-package-forge'),
            StringStruct('LegalCopyright', 'Copyright (c) 2025 Nathan da Silva Miranda'),
            StringStruct('OriginalFilename', 'unity-package-forge.exe'),
            StringStruct('ProductName', 'Unity Package Forge'),
            StringStruct('ProductVersion', '1.0.0')
          ]
        )
      ]
    ),
    VarFileInfo([VarStruct('Translation', [1033, 1200])])
  ]
)
'''

    with open('version_info.txt', 'w', encoding='utf-8') as f:
        f.write(version_info.strip())

    print("‚úÖ Arquivo version_info.txt criado")
    return True


def fix_spec_file():
    """Corrige o arquivo .spec para evitar problemas de encoding"""
    print("üîß Corrigindo arquivo .spec...")

    if not os.path.exists('unity_package_forge.spec'):
        print("‚ùå Arquivo unity_package_forge.spec n√£o encontrado!")
        return False

    # Ler o arquivo atual
    with open('unity_package_forge.spec', 'r', encoding='utf-8') as f:
        content = f.read()

    # Substituir caracteres problem√°ticos por vers√µes ASCII
    replacements = {
        '‚úÖ': '[OK]',
        '‚ùå': '[ERROR]',
        'üîß': '[TOOL]',
        'üìÑ': '[FILE]',
        'üßπ': '[CLEAN]',
        'üîç': '[CHECK]',
        'üß™': '[TEST]',
        'üî®': '[BUILD]',
        'üöÄ': '[LAUNCH]',
        'üì¶': '[PACKAGE]',
        '‚ö†Ô∏è': '[WARNING]',
        '‚ÑπÔ∏è': '[INFO]'
    }

    modified = False
    for unicode_char, ascii_replacement in replacements.items():
        if unicode_char in content:
            content = content.replace(unicode_char, ascii_replacement)
            modified = True

    # Se modificou, salvar o arquivo
    if modified:
        with open('unity_package_forge.spec', 'w', encoding='utf-8') as f:
            f.write(content)
        print("‚úÖ Arquivo .spec corrigido")
    else:
        print("‚ÑπÔ∏è Arquivo .spec n√£o precisou ser corrigido")

    return True


def test_imports():
    """Testa se todos os imports funcionam"""
    print("üß™ Testando imports...")

    try:
        sys.path.insert(0, '.')
        from utils.resource_utils import get_resource_path, is_executable
        from utils.crypto_utils import get_crypto_instance
        from utils.version_utils import get_current_version
        print("‚úÖ Todos os imports funcionando")
        return True
    except Exception as e:
        print(f"‚ùå Erro nos imports: {e}")
        return False


def build_executable():
    """Constr√≥i o execut√°vel usando PyInstaller"""
    print("üî® Construindo execut√°vel...")

    if not os.path.exists('unity_package_forge.spec'):
        print("‚ùå Arquivo unity_package_forge.spec n√£o encontrado!")
        return False

    # Definir vari√°veis de ambiente para encoding UTF-8
    env = os.environ.copy()
    if platform.system() == 'Windows':
        env['PYTHONIOENCODING'] = 'utf-8'
        env['PYTHONLEGACYWINDOWSSTDIO'] = '1'

    # Executar PyInstaller
    cmd = "pyinstaller unity_package_forge.spec --clean --noconfirm --log-level WARN"
    success, stdout, stderr = run_command(cmd)

    if not success:
        print(f"‚ùå Erro durante build:")
        print(stderr)
        return False

    # Verificar se o execut√°vel foi criado
    system = platform.system()
    if system == 'Windows':
        exec_name = 'unity-package-forge.exe'
    else:
        exec_name = 'unity-package-forge'

    exec_path = Path('dist') / exec_name

    if exec_path.exists():
        size = exec_path.stat().st_size / (1024 * 1024)  # MB
        print(f"‚úÖ Execut√°vel criado: {exec_path}")
        print(f"   Tamanho: {size:.1f} MB")

        # Definir permiss√µes no Linux/macOS
        if system != 'Windows':
            os.chmod(exec_path, 0o755)
            print("‚úÖ Permiss√µes de execu√ß√£o definidas")

        return True
    else:
        print(f"‚ùå Execut√°vel n√£o encontrado em: {exec_path}")
        if os.path.exists('dist'):
            print("Arquivos em dist:")
            for f in os.listdir('dist'):
                print(f"  - {f}")
        return False


def test_executable():
    """Testa se o execut√°vel funciona"""
    print("üß™ Testando execut√°vel...")

    system = platform.system()
    if system == 'Windows':
        exec_name = 'unity-package-forge.exe'
    else:
        exec_name = 'unity-package-forge'

    exec_path = Path('dist') / exec_name

    if not exec_path.exists():
        print("‚ùå Execut√°vel n√£o encontrado para teste")
        return False

    # Teste b√°sico - s√≥ verificar se inicia sem erro
    try:
        if system == 'Windows':
            # No Windows, tentar executar com timeout
            process = subprocess.Popen([str(exec_path)],
                                       stdout=subprocess.PIPE,
                                       stderr=subprocess.PIPE,
                                       creationflags=subprocess.CREATE_NO_WINDOW)

            # Aguardar um pouco e matar o processo
            import time
            time.sleep(2)
            process.terminate()

            print("‚úÖ Execut√°vel inicia sem erros cr√≠ticos")
            return True
        else:
            # No Linux/macOS, executar com --version se dispon√≠vel
            success, stdout, stderr = run_command(f"{exec_path} --help")
            if "unity" in stdout.lower() or "package" in stdout.lower():
                print("‚úÖ Execut√°vel responde corretamente")
                return True
            else:
                print("‚ö†Ô∏è  Execut√°vel criado mas resposta inesperada")
                return True
    except Exception as e:
        print(f"‚ö†Ô∏è  Erro ao testar execut√°vel: {e}")
        print("   (Isso pode ser normal se o app precisa de GUI)")
        return True


def main():
    """Fun√ß√£o principal"""
    print("üöÄ Unity Package Forge - Build Script")
    print("=" * 50)

    # Configurar encoding UTF-8 para stdout no Windows
    if platform.system() == 'Windows':
        import codecs
        sys.stdout = codecs.getwriter('utf-8')(sys.stdout.buffer, 'strict')
        sys.stderr = codecs.getwriter('utf-8')(sys.stderr.buffer, 'strict')

    # Verificar depend√™ncias
    if not check_dependencies():
        print("\n‚ùå Depend√™ncias n√£o atendidas. Instale as depend√™ncias necess√°rias.")
        return 1

    # Limpar builds anteriores
    clean_build()

    # Criar informa√ß√µes de vers√£o
    if not create_version_info():
        print("\n‚ùå Erro ao criar informa√ß√µes de vers√£o")
        return 1

    # Corrigir arquivo .spec
    if not fix_spec_file():
        print("\n‚ùå Erro ao corrigir arquivo .spec")
        return 1

    # Testar imports
    if not test_imports():
        print("\n‚ùå Erro nos imports. Verifique o c√≥digo.")
        return 1

    # Construir execut√°vel
    if not build_executable():
        print("\n‚ùå Erro durante build do execut√°vel")
        return 1

    # Testar execut√°vel
    if not test_executable():
        print("\n‚ö†Ô∏è  Execut√°vel criado mas pode ter problemas")

    print("\n" + "=" * 50)
    print("‚úÖ Build conclu√≠do com sucesso!")
    print(f"üì¶ Execut√°vel dispon√≠vel em: dist/")

    # Mostrar arquivos criados
    if os.path.exists('dist'):
        print("\nArquivos criados:")
        for f in os.listdir('dist'):
            path = Path('dist') / f
            size = path.stat().st_size / (1024 * 1024)
            print(f"  üìÑ {f} ({size:.1f} MB)")

    return 0


if __name__ == "__main__":
    sys.exit(main())