name: Build and Release

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

permissions:
  contents: write
  issues: write
  pull-requests: write

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.10'

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y python3-tk xvfb

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Test imports
      run: |
        xvfb-run -a python -c "
        import sys
        sys.path.insert(0, '.')
        try:
            from utils.resource_utils import get_resource_path, is_executable
            from utils.crypto_utils import get_crypto_instance
            from utils.version_utils import get_current_version
            print('✅ All imports successful')
        except Exception as e:
            print(f'❌ Import error: {e}')
            sys.exit(1)
        "

  release:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    outputs:
      released: ${{ steps.release.outputs.released }}
      tag_name: ${{ steps.release.outputs.tag_name }}
      version: ${{ steps.release.outputs.version }}

    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'

    - name: Create semantic-release config
      run: |
        cat > package.json << 'EOF'
        {
          "name": "unity-package-forge",
          "version": "0.0.0-development",
          "description": "Unity Package Forge",
          "main": "main.py",
          "repository": {
            "type": "git",
            "url": "git+https://github.com/${{ github.repository }}.git"
          },
          "keywords": ["unity", "package", "generator"],
          "author": "Nathan da Silva Miranda",
          "license": "MIT"
        }
        EOF

        cat > .releaserc.json << 'EOF'
        {
          "branches": [
            "main"
          ],
          "plugins": [
            "@semantic-release/commit-analyzer",
            "@semantic-release/release-notes-generator",
            [
              "@semantic-release/changelog",
              {
                "changelogFile": "CHANGELOG.md"
              }
            ],
            [
              "@semantic-release/git",
              {
                "assets": ["CHANGELOG.md"],
                "message": "chore(release): ${nextRelease.version} [skip ci]\n\n${nextRelease.notes}"
              }
            ],
            "@semantic-release/github"
          ]
        }
        EOF

    - name: Install semantic-release
      run: |
        npm install -g semantic-release@21 \
          @semantic-release/commit-analyzer@10 \
          @semantic-release/release-notes-generator@11 \
          @semantic-release/changelog@6 \
          @semantic-release/git@10 \
          @semantic-release/github@9

    - name: Release
      id: release
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        # Captura output do semantic-release
        npx semantic-release --dry-run > release_output.txt 2>&1 || true
        
        # Verifica se uma nova release será criada
        if grep -q "Published release" release_output.txt || ! grep -q "no release" release_output.txt; then
          # Executa o release real
          npx semantic-release
          
          # Pega a nova tag
          NEW_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
          
          if [ -n "$NEW_TAG" ]; then
            echo "released=true" >> $GITHUB_OUTPUT
            echo "tag_name=${NEW_TAG}" >> $GITHUB_OUTPUT
            echo "version=${NEW_TAG#v}" >> $GITHUB_OUTPUT
            echo "✅ New release created: ${NEW_TAG}"
          else
            echo "released=false" >> $GITHUB_OUTPUT
            echo "tag_name=" >> $GITHUB_OUTPUT
            echo "version=1.0.0" >> $GITHUB_OUTPUT
            echo "ℹ️ No new release created"
          fi
        else
          echo "released=false" >> $GITHUB_OUTPUT
          echo "tag_name=" >> $GITHUB_OUTPUT  
          echo "version=1.0.0" >> $GITHUB_OUTPUT
          echo "ℹ️ No release needed"
        fi

  build:
    needs: [test, release]
    if: always() && needs.test.result == 'success' && github.ref == 'refs/heads/main'
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: windows-latest
            name: windows
            ext: .exe
            artifact_name: unity-package-forge-windows.exe
          - os: ubuntu-20.04
            name: linux
            ext: ''
            artifact_name: unity-package-forge-linux
          - os: macos-12
            name: macos
            ext: ''
            artifact_name: unity-package-forge-macos

    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Setup Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.10'

    - name: Install system dependencies (Linux)
      if: matrix.os == 'ubuntu-20.04'
      run: |
        sudo apt-get update
        sudo apt-get install -y python3-tk xvfb

    - name: Install system dependencies (macOS)
      if: matrix.os == 'macos-12'
      run: |
        brew install python-tk

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pyinstaller

    - name: Create version info for Windows
      if: matrix.os == 'windows-latest'
      shell: powershell
      run: |
        $version = "${{ needs.release.outputs.version }}"
        if (-not $version -or $version -eq "") { $version = "1.0.0" }
        
        $versionParts = $version.Split('.')
        $major = [int]$versionParts[0]
        $minor = if ($versionParts.Length -gt 1) { [int]$versionParts[1] } else { 0 }
        $patch = if ($versionParts.Length -gt 2) { [int]$versionParts[2] } else { 0 }
        
        @"
        VSVersionInfo(
          ffi=FixedFileInfo(
            filevers=($major, $minor, $patch, 0),
            prodvers=($major, $minor, $patch, 0),
            mask=0x3f,
            flags=0x0,
            OS=0x4,
            fileType=0x1,
            subtype=0x0,
            date=(0, 0)
          ),
          kids=[
            StringFileInfo(
              [
                StringTable(
                  '040904B0',
                  [
                    StringStruct('CompanyName', 'Nathan da Silva Miranda'),
                    StringStruct('FileDescription', 'Unity Package Forge'),
                    StringStruct('FileVersion', '$version'),
                    StringStruct('InternalName', 'unity-package-forge'),
                    StringStruct('LegalCopyright', 'Copyright (c) 2025 Nathan da Silva Miranda'),
                    StringStruct('OriginalFilename', 'unity-package-forge.exe'),
                    StringStruct('ProductName', 'Unity Package Forge'),
                    StringStruct('ProductVersion', '$version')
                  ]
                )
              ]
            ),
            VarFileInfo([VarStruct('Translation', [1033, 1200])])
          ]
        )
        "@ | Out-File -FilePath "version_info.txt" -Encoding UTF8

    - name: Update spec file
      shell: bash
      run: |
        if [ "${{ matrix.os }}" = "windows-latest" ]; then
          # Atualiza o spec para usar version_file no Windows
          sed -i 's/version_file=None/version_file="version_info.txt"/' unity_package_forge.spec
        fi
        
        echo "Building version: ${{ needs.release.outputs.version }}"

    - name: Build executable
      shell: bash
      run: |
        echo "=== Starting PyInstaller build ==="
        echo "Current directory: $(pwd)"
        echo "Python version: $(python --version)"
        echo "PyInstaller version: $(pyinstaller --version)"
        
        # Build com verbose para debug
        if [ "${{ matrix.os }}" = "ubuntu-20.04" ]; then
          xvfb-run -a pyinstaller unity_package_forge.spec --clean --noconfirm --log-level DEBUG
        else
          pyinstaller unity_package_forge.spec --clean --noconfirm --log-level DEBUG
        fi

    - name: Verify and rename executable
      shell: bash
      run: |
        echo "=== Checking build output ==="
        
        if [ ! -d "dist" ]; then
          echo "❌ Dist directory not found"
          exit 1
        fi
        
        echo "Dist directory contents:"
        ls -la dist/
        
        # Encontra o executável criado
        if [ "${{ matrix.os }}" = "windows-latest" ]; then
          BUILT_EXEC="dist/unity-package-forge.exe"
        else
          BUILT_EXEC="dist/unity-package-forge"
        fi
        
        if [ -f "$BUILT_EXEC" ]; then
          echo "✅ Executable found: $BUILT_EXEC"
          echo "File size: $(du -h "$BUILT_EXEC" | cut -f1)"
          
          # Renomeia para o nome final
          mv "$BUILT_EXEC" "dist/${{ matrix.artifact_name }}"
          echo "✅ Renamed to: dist/${{ matrix.artifact_name }}"
          
          # Testa o executável (básico)
          if [ "${{ matrix.os }}" != "macos-12" ]; then
            echo "Testing executable..."
            if [ "${{ matrix.os }}" = "ubuntu-20.04" ]; then
              timeout 10s xvfb-run -a "dist/${{ matrix.artifact_name }}" --version || echo "Test completed"
            else
              timeout 10s "dist/${{ matrix.artifact_name }}" --version || echo "Test completed"
            fi
          fi
          
        else
          echo "❌ Executable not found at: $BUILT_EXEC"
          echo "Available files in dist:"
          find dist -type f -name "*" || echo "No files found"
          exit 1
        fi

    - name: Upload to release (if released)
      if: needs.release.outputs.released == 'true'
      uses: softprops/action-gh-release@v1
      with:
        files: dist/${{ matrix.artifact_name }}
        tag_name: ${{ needs.release.outputs.tag_name }}
        body: |
          ## 📦 Unity Package Forge ${{ needs.release.outputs.tag_name }}
          
          ### 📥 Downloads
          
          - 🪟 **Windows**: [unity-package-forge-windows.exe](https://github.com/${{ github.repository }}/releases/download/${{ needs.release.outputs.tag_name }}/unity-package-forge-windows.exe)
          - 🐧 **Linux**: [unity-package-forge-linux](https://github.com/${{ github.repository }}/releases/download/${{ needs.release.outputs.tag_name }}/unity-package-forge-linux)  
          - 🍎 **macOS**: [unity-package-forge-macos](https://github.com/${{ github.repository }}/releases/download/${{ needs.release.outputs.tag_name }}/unity-package-forge-macos)
          
          ### 🚀 Como usar
          
          1. Baixe o executável para seu sistema operacional
          2. No Windows/Linux: Execute diretamente
          3. No macOS: Talvez seja necessário permitir em Configurações > Segurança
          
          ### ⚠️ Aviso do Windows Defender
          
          Como o executável não possui assinatura digital, o Windows Defender pode mostrar um aviso. Isso é normal para aplicações não assinadas. Para continuar:
          
          1. Clique em "Mais informações" 
          2. Clique em "Executar mesmo assim"
          
          Ou adicione uma exceção no Windows Defender para a pasta onde baixou o arquivo.
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: unity-package-forge-${{ matrix.name }}
        path: dist/${{ matrix.artifact_name }}
        retention-days: 90
        compression-level: 6