name: Build and Release

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

permissions:
  contents: write
  issues: write
  pull-requests: write

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y python3-tk

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Test imports
      run: |
        python -c "
        import sys
        sys.path.insert(0, '.')
        try:
            from utils.resource_utils import get_resource_path, is_executable
            from utils.crypto_utils import get_crypto_instance
            from utils.version_utils import get_current_version
            print('‚úÖ All imports successful')
        except Exception as e:
            print(f'‚ùå Import error: {e}')
            sys.exit(1)
        "

  release:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    outputs:
      released: ${{ steps.release.outputs.released }}
      tag_name: ${{ steps.release.outputs.tag_name }}
      changelog: ${{ steps.release.outputs.changelog }}

    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'

    - name: Create package.json and release config
      run: |
        cat > package.json << 'EOF'
        {
          "name": "unity-package-forge",
          "version": "1.0.0",
          "description": "Unity Package Forge",
          "main": "main.py",
          "scripts": {
            "test": "echo \"Error: no test specified\" && exit 1"
          },
          "repository": {
            "type": "git",
            "url": "git+https://github.com/Natteens/UnityPackageForge.git"
          },
          "keywords": ["unity", "package", "generator"],
          "author": "Nathan da Silva Miranda",
          "license": "MIT",
          "devDependencies": {
            "semantic-release": "^21.0.0",
            "@semantic-release/github": "^9.0.0",
            "@semantic-release/changelog": "^6.0.0",
            "@semantic-release/git": "^10.0.0"
          }
        }
        EOF

        cat > .releaserc.json << 'EOF'
        {
          "branches": ["main"],
          "plugins": [
            "@semantic-release/commit-analyzer",
            "@semantic-release/release-notes-generator",
            ["@semantic-release/changelog", {
              "changelogFile": "CHANGELOG.md"
            }],
            "@semantic-release/github",
            ["@semantic-release/git", {
              "assets": ["CHANGELOG.md"],
              "message": "chore(release): ${nextRelease.version} [skip ci]\n\n${nextRelease.notes}"
            }]
          ]
        }
        EOF

    - name: Install semantic-release
      run: |
        npm install semantic-release @semantic-release/github @semantic-release/changelog @semantic-release/git @semantic-release/commit-analyzer @semantic-release/release-notes-generator        

    - name: Get tag before release
      id: tag_before
      run: |
        TAG_BEFORE=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
        echo "tag_before=${TAG_BEFORE}" >> $GITHUB_OUTPUT

    - name: Release
      id: release
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        npx semantic-release
        
        TAG_AFTER=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
        TAG_BEFORE="${{ steps.tag_before.outputs.tag_before }}"
        
        if [ "${TAG_AFTER}" != "${TAG_BEFORE}" ] && [ -n "${TAG_AFTER}" ]; then
          echo "released=true" >> $GITHUB_OUTPUT
          echo "tag_name=${TAG_AFTER}" >> $GITHUB_OUTPUT
          
          if [ -f "CHANGELOG.md" ]; then
            CHANGELOG=$(cat CHANGELOG.md | head -50)
            echo "changelog<<EOF" >> $GITHUB_OUTPUT
            echo "$CHANGELOG" >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT
          fi
          
          echo "‚úÖ New release: ${TAG_AFTER}"
        else
          echo "released=false" >> $GITHUB_OUTPUT
          echo "tag_name=" >> $GITHUB_OUTPUT
          echo "changelog=" >> $GITHUB_OUTPUT
          echo "‚ÑπÔ∏è No release created"
        fi

  build:
    needs: [test, release]
    if: github.ref == 'refs/heads/main'
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: windows-latest
            name: windows
            ext: .exe
            artifact_name: unity-package-forge-windows.exe
          - os: ubuntu-latest
            name: linux
            ext: ''
            artifact_name: unity-package-forge-linux
          - os: macos-latest
            name: macos
            ext: ''
            artifact_name: unity-package-forge-macos

    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: Install system dependencies (Ubuntu)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y python3-tk

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Create version info for Windows
      if: matrix.os == 'windows-latest'
      run: |
        $version = if ("${{ needs.release.outputs.tag_name }}") { "${{ needs.release.outputs.tag_name }}".TrimStart('v') } else { "1.0.0" }
        $versionParts = $version.Split('.')
        $major = $versionParts[0]
        $minor = if ($versionParts.Length -gt 1) { $versionParts[1] } else { "0" }
        $patch = if ($versionParts.Length -gt 2) { $versionParts[2] } else { "0" }
        
        @"
        VSVersionInfo(
          ffi=FixedFileInfo(
            filevers=($major, $minor, $patch, 0),
            prodvers=($major, $minor, $patch, 0),
            mask=0x3f,
            flags=0x0,
            OS=0x4,
            fileType=0x1,
            subtype=0x0,
            date=(0, 0)
          ),
          kids=[
            StringFileInfo(
              [
                StringTable(
                  '040904B0',
                  [
                    StringStruct('CompanyName', 'Nathan da Silva Miranda'),
                    StringStruct('FileDescription', 'Unity Package Forge'),
                    StringStruct('FileVersion', '$version'),
                    StringStruct('InternalName', 'unity-package-forge'),
                    StringStruct('LegalCopyright', 'Copyright (c) 2025 Nathan da Silva Miranda'),
                    StringStruct('OriginalFilename', 'unity-package-forge.exe'),
                    StringStruct('ProductName', 'Unity Package Forge'),
                    StringStruct('ProductVersion', '$version')
                  ]
                )
              ]
            ),
            VarFileInfo([VarStruct('Translation', [1033, 1200])])
          ]
        )
        "@ | Out-File -FilePath "version_info.txt" -Encoding UTF8
      shell: powershell

    - name: Update spec file for current build
      shell: bash
      run: |
        VERSION="${{ needs.release.outputs.tag_name }}"
        if [ -z "$VERSION" ]; then
          VERSION="v1.0.0"
        fi
        
        if [ "${{ matrix.os }}" = "windows-latest" ]; then
          sed -i 's/version_file=None/version_file="version_info.txt"/' unity_package_forge.spec || true
        fi
        
        echo "Building version: $VERSION"

    - name: Build executable
      shell: bash
      run: |
        echo "=== Starting PyInstaller build ==="
        echo "Current directory contents:"
        ls -la
        
        if [ ! -f "CHANGELOG.md" ] && [ -n "${{ needs.release.outputs.changelog }}" ]; then
          echo "${{ needs.release.outputs.changelog }}" > CHANGELOG.md
        fi
        
        pyinstaller unity_package_forge.spec --clean --noconfirm --log-level INFO

    - name: Verify build output
      shell: bash
      run: |
        echo "=== Checking build output ==="
        if [ -d "dist" ]; then
          echo "Dist directory contents:"
          ls -la dist/
          
          EXEC_PATH="dist/unity_package_forge${{ matrix.ext }}"
          
          if [ -f "$EXEC_PATH" ]; then
            echo "‚úÖ Executable created successfully: $EXEC_PATH"
            echo "File size: $(du -h "$EXEC_PATH" | cut -f1)"
            
            mv "$EXEC_PATH" "dist/${{ matrix.artifact_name }}"
            echo "‚úÖ Renamed to: dist/${{ matrix.artifact_name }}"
          else
            echo "‚ùå Executable not found at: $EXEC_PATH"
            echo "Available files in dist:"
            find dist -type f -name "*" || echo "No files found in dist"
            exit 1
          fi
        else
          echo "‚ùå Dist directory not found"
          echo "Build directory contents:"
          ls -la build/ || echo "Build directory not found"
          exit 1
        fi

    - name: Upload to release
      if: needs.release.outputs.released == 'true'
      uses: softprops/action-gh-release@v1
      with:
        files: dist/${{ matrix.artifact_name }}
        tag_name: ${{ needs.release.outputs.tag_name }}
        body: |
          ## Download

          - ü™ü **Windows**: [unity-package-forge-windows.exe](https://github.com/${{ github.repository }}/releases/download/${{ needs.release.outputs.tag_name }}/unity-package-forge-windows.exe)
          - üêß **Linux**: [unity-package-forge-linux](https://github.com/${{ github.repository }}/releases/download/${{ needs.release.outputs.tag_name }}/unity-package-forge-linux)  
          - üçé **macOS**: [unity-package-forge-macos](https://github.com/${{ github.repository }}/releases/download/${{ needs.release.outputs.tag_name }}/unity-package-forge-macos)

          ${{ needs.release.outputs.changelog }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Upload as artifact
      uses: actions/upload-artifact@v4
      with:
        name: unity-package-forge-${{ matrix.name }}
        path: dist/${{ matrix.artifact_name }}
        retention-days: 30