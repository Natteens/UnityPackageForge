name: Release and Build

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  release:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    outputs:
      released: ${{ steps.release.outputs.released }}
      version: ${{ steps.release.outputs.version }}

    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: 18
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Release
      id: release
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        npx semantic-release
        echo "released=true" >> $GITHUB_OUTPUT

  build-executables:
    needs: release
    if: needs.release.outputs.released == 'true'
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: windows-latest
            name: windows
            ext: .exe
            build_cmd: pyinstaller --onefile --windowed --name "unity-package-forge-windows" --icon="ui/icon.ico" main.py
          - os: ubuntu-latest
            name: linux
            ext: ''
            build_cmd: pyinstaller --onefile --name "unity-package-forge-linux" main.py
          - os: macos-latest
            name: macos
            ext: ''
            build_cmd: pyinstaller --onefile --windowed --name "unity-package-forge-macos" main.py

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install system dependencies (Ubuntu)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y python3-tk

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pyinstaller
        pip install -r requirements.txt

    - name: Build executable
      run: ${{ matrix.build_cmd }}

    - name: Upload executable to release
      uses: softprops/action-gh-release@v1
      with:
        files: dist/unity-package-forge-${{ matrix.name }}${{ matrix.ext }}
        tag_name: ${{ needs.release.outputs.version }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  test:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ['3.8', '3.9', '3.10', '3.11']

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install system dependencies (Ubuntu)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y python3-tk

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest

    - name: Test imports
      run: |
        python -c "import customtkinter; import requests; print('Dependencies OK')"
        python -c "from utils.version_utils import get_current_version; print(f'Version: {get_current_version()}')"
