name: Release and Build

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  release:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    outputs:
      released: ${{ steps.release.outputs.released }}
      tag_name: ${{ steps.release.outputs.tag_name }}

    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: 18
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Get tag before release
      id: tag_before
      run: |
        TAG_BEFORE=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
        echo "tag_before=${TAG_BEFORE}" >> $GITHUB_OUTPUT
        echo "Tag before release: ${TAG_BEFORE}"

    - name: Release
      id: release
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        npx semantic-release
        
        # Get tag after release
        TAG_AFTER=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
        TAG_BEFORE="${{ steps.tag_before.outputs.tag_before }}"
        
        echo "Tag before: ${TAG_BEFORE}"
        echo "Tag after: ${TAG_AFTER}"
        
        # Check if a new tag was created
        if [ "${TAG_AFTER}" != "${TAG_BEFORE}" ] && [ -n "${TAG_AFTER}" ]; then
          echo "released=true" >> $GITHUB_OUTPUT
          echo "tag_name=${TAG_AFTER}" >> $GITHUB_OUTPUT
          echo "✅ New release created: ${TAG_AFTER}"
        else
          echo "released=false" >> $GITHUB_OUTPUT
          echo "tag_name=" >> $GITHUB_OUTPUT
          echo "ℹ️ No release created - no qualifying commits"
        fi

  build-executables:
    needs: release
    if: github.ref == 'refs/heads/main'
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: windows-latest
            name: windows
            ext: .exe
            build_cmd: pyinstaller --onefile --windowed --name "unity-package-forge-windows" --icon="ui/icon.ico" main.py
          - os: ubuntu-latest
            name: linux
            ext: ''
            build_cmd: pyinstaller --onefile --name "unity-package-forge-linux" main.py
          - os: macos-latest
            name: macos
            ext: ''
            build_cmd: pyinstaller --onefile --windowed --name "unity-package-forge-macos" main.py

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install system dependencies (Ubuntu)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y python3-tk

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pyinstaller
        pip install -r requirements.txt

    - name: Build executable
      run: ${{ matrix.build_cmd }}

    # Code signing preparation (Windows only)
    - name: Code Sign (Windows)
      if: matrix.os == 'windows-latest' && env.WINDOWS_CERTIFICATE != ''
      shell: powershell
      run: |
        # This step is prepared for future code signing
        # To enable, add WINDOWS_CERTIFICATE and WINDOWS_CERTIFICATE_PASSWORD secrets
        Write-Host "Code signing preparation complete"
        # Uncomment when certificate is available:
        # $cert = [System.Convert]::FromBase64String($env:WINDOWS_CERTIFICATE)
        # [System.IO.File]::WriteAllBytes("cert.p12", $cert)
        # & 'C:\Program Files (x86)\Windows Kits\10\bin\10.0.22000.0\x64\signtool.exe' sign /f cert.p12 /p $env:WINDOWS_CERTIFICATE_PASSWORD /tr http://timestamp.digicert.com /td sha256 /fd sha256 "dist\unity-package-forge-windows.exe"
        # Remove-Item cert.p12
      env:
        WINDOWS_CERTIFICATE: ${{ secrets.WINDOWS_CERTIFICATE }}
        WINDOWS_CERTIFICATE_PASSWORD: ${{ secrets.WINDOWS_CERTIFICATE_PASSWORD }}

    - name: Upload executable to release
      if: needs.release.outputs.released == 'true'
      uses: softprops/action-gh-release@v1
      with:
        files: dist/unity-package-forge-${{ matrix.name }}${{ matrix.ext }}
        tag_name: ${{ needs.release.outputs.tag_name }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Upload executable as artifact
      uses: actions/upload-artifact@v4
      with:
        name: unity-package-forge-${{ matrix.name }}
        path: dist/unity-package-forge-${{ matrix.name }}${{ matrix.ext }}

  test:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ['3.8', '3.9', '3.10', '3.11']

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install system dependencies (Ubuntu)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y python3-tk

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest

    - name: Test imports
      run: |
        python -c "import customtkinter; import requests; print('Dependencies OK')"
        python -c "from utils.version_utils import get_current_version; print(f'Version: {get_current_version()}')"